cmd_ref:
/usr/libexec/virtiofsd --socket-path=/tmp/vhostqemu -o source=$TESTDIR -o cache=always


tools/virtiofsd/passthrough_ll.c -> main
    lstat(lo.source, &stat)
    fuse_session_new(&args, &lo_oper, sizeof(lo_oper), &lo)
    fuse_session_mount(se) -> virtio_session_mount
        fv_create_listen_socket
        data_sock = accept(se->vu_listen_fd, NULL, NULL)
    fuse_daemonize(opts.foreground)
    setup_sandbox
        setup_mounts
            mount(source, source, NULL, MS_BIND | MS_REC, NULL)
            newroot = open(source, O_DIRECTORY | O_RDONLY | O_CLOEXEC)
            fchdir(newroot)
    setup_root(&lo, &lo.root)
    ret = virtio_loop(se)

static struct fuse_lowlevel_ops lo_oper = {
    .init = lo_init,
    .lookup = lo_lookup,
    .mkdir = lo_mkdir,
    .mknod = lo_mknod,
    .symlink = lo_symlink,
    .link = lo_link,
    .unlink = lo_unlink,
    .rmdir = lo_rmdir,
    .rename = lo_rename,
    .forget = lo_forget,
    .forget_multi = lo_forget_multi,
    .getattr = lo_getattr,
    .setattr = lo_setattr,
    .readlink = lo_readlink,
    .opendir = lo_opendir,
    .readdir = lo_readdir,
    .readdirplus = lo_readdirplus,
    .releasedir = lo_releasedir,
    .fsyncdir = lo_fsyncdir,
    .create = lo_create,
    .getlk = lo_getlk,
    .setlk = lo_setlk,
    .open = lo_open,
    .release = lo_release,
    .flush = lo_flush,
    .fsync = lo_fsync,
    .read = lo_read,
    .write_buf = lo_write_buf, -> 使用零拷贝写入,实现 write_buf 而不是 write 将得到极大的性能提升。它接收一个 in_buf ，然后通过调用 FUSE_BUFVEC_INIT 宏生成一个 outbuf 并使用 fuse_buf_copy 方法调用写入。这个过程将基本不会产生任何性能的损耗。示例如下
        drop_security_capability(lo_data(req), out_buf.buf[0].fd)
        res = fuse_buf_copy(req, &out_buf, in_buf, fi->kill_priv)
    .statfs = lo_statfs,
    .fallocate = lo_fallocate,
    .flock = lo_flock,
    .getxattr = lo_getxattr,
    .listxattr = lo_listxattr,
    .setxattr = lo_setxattr,
    .removexattr = lo_removexattr,
#ifdef HAVE_COPY_FILE_RANGE
    .copy_file_range = lo_copy_file_range,
#endif
    .lseek = lo_lseek,
    .destroy = lo_destroy,
    .setupmapping = lo_setupmapping,
    .removemapping = lo_removemapping,
};


block/export/export.c
#ifdef CONFIG_FUSE
    &blk_exp_fuse,

const BlockExportDriver blk_exp_fuse = {
    .type               = BLOCK_EXPORT_TYPE_FUSE,
    .instance_size      = sizeof(FuseExport),
    .create             = fuse_export_create,
        static GHashTable *exports
        g_hash_table_contains(exports, args->mountpoint)
        setup_fuse_export(exp, args->mountpoint, true, NULL)
            mount_opts = g_strdup_printf("max_read=%zu,default_permissions%s",
            exp->fuse_session = fuse_session_new(&fuse_args, &fuse_ops, sizeof(fuse_ops), exp)
            fuse_session_mount(exp->fuse_session, mountpoint)
            g_hash_table_insert(exports, g_strdup(mountpoint), NULL)
            aio_set_fd_handler(exp->common.ctx, fuse_session_fd(exp->fuse_session), true, read_from_fuse_export, NULL, NULL, exp)
                do fuse_session_receive_buf(exp->fuse_session, &exp->fuse_buf)
                fuse_session_process_buf(exp->fuse_session, &exp->fuse_buf) -> fuse_session_process_buf_int
                    in = fuse_mbuf_iter_advance(&iter, sizeof(*in))
                    fuse_ll_alloc_req
                    do_write_buf
    .delete             = fuse_export_delete,
    .request_shutdown   = fuse_export_shutdown,
};



static const struct fuse_lowlevel_ops fuse_ops = {
    .init       = fuse_init,
    .lookup     = fuse_lookup,
    .getattr    = fuse_getattr,
    .setattr    = fuse_setattr,
    .open       = fuse_open,
    .read       = fuse_read,
    .write      = fuse_write,
    .fallocate  = fuse_fallocate,
    .flush      = fuse_flush,
    .fsync      = fuse_fsync,
#ifdef CONFIG_FUSE_LSEEK
    .lseek      = fuse_lseek,
#endif
};
